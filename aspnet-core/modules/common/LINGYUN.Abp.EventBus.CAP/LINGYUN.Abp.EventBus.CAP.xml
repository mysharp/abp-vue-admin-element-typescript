<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LINGYUN.Abp.EventBus.CAP</name>
    </assembly>
    <members>
        <member name="T:DotNetCore.CAP.ConsumerServiceSelector">
            <summary>
            消费者查找器
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.ConsumerServiceSelector.AbpDistributedEventBusOptions">
            <summary>
            Abp分布式事件配置
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.ConsumerServiceSelector.ServiceProvider">
            <summary>
            服务提供者
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.ConsumerServiceSelector.#ctor(System.IServiceProvider,Microsoft.Extensions.Options.IOptions{Volo.Abp.EventBus.Distributed.AbpDistributedEventBusOptions})">
            <summary>
            Creates a new <see cref="T:DotNetCore.CAP.Internal.ConsumerServiceSelector" />.
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.ConsumerServiceSelector.FindConsumersFromInterfaceTypes(System.IServiceProvider)">
            <summary>
            查找消费者集合
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetCore.CAP.ConsumerServiceSelector.GetHandlerDescription(System.Type,System.Type)">
            <summary>
            获取事件处理器集合
            </summary>
            <param name="eventType"></param>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetCore.CAP.Processor.AbpCapExpiresMessageCleanupBackgroundWorker">
            <summary>
            过期消息清理任务
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.Processor.AbpCapExpiresMessageCleanupBackgroundWorker.Options">
            <summary>
            过期消息清理配置
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.Processor.AbpCapExpiresMessageCleanupBackgroundWorker.Initializer">
            <summary>
            Initializer
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.Processor.AbpCapExpiresMessageCleanupBackgroundWorker.Storage">
            <summary>
            Storage
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Processor.AbpCapExpiresMessageCleanupBackgroundWorker.#ctor(Volo.Abp.Threading.AbpTimer,DotNetCore.CAP.Persistence.IDataStorage,DotNetCore.CAP.Persistence.IStorageInitializer,Microsoft.Extensions.Options.IOptions{LINGYUN.Abp.EventBus.CAP.AbpCAPEventBusOptions},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            创建过期消息清理任务
            </summary>
            <param name="timer"></param>
            <param name="storage"></param>
            <param name="initializer"></param>
            <param name="options"></param>
            <param name="serviceScopeFactory"></param>
        </member>
        <member name="M:DotNetCore.CAP.Processor.AbpCapExpiresMessageCleanupBackgroundWorker.DoWorkAsync(Volo.Abp.BackgroundWorkers.PeriodicBackgroundWorkerContext)">
            <summary>
            异步执行任务
            </summary>
            <param name="workerContext"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetCore.CAP.Processor.AbpCapProcessingServer">
            <summary>
            CapProcessingServer
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Processor.AbpCapProcessingServer.#ctor(Microsoft.Extensions.Logging.ILogger{DotNetCore.CAP.Processor.AbpCapProcessingServer},Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)">
            <summary>
            CapProcessingServer
            </summary>
            <param name="logger"></param>
            <param name="loggerFactory"></param>
            <param name="provider"></param>
        </member>
        <member name="M:DotNetCore.CAP.Processor.AbpCapProcessingServer.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Processor.AbpCapProcessingServer.Pulse">
            <summary>
            Pulse
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Processor.AbpCapProcessingServer.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:LINGYUN.Abp.EventBus.CAP.AbpCAPEventBusModule">
            <summary>
            AbpCAPEventBusModule
            </summary>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.AbpCAPEventBusModule.ConfigureServices(Volo.Abp.Modularity.ServiceConfigurationContext)">
            <summary>
            ConfigureServices
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.AbpCAPEventBusModule.OnApplicationInitialization(Volo.Abp.ApplicationInitializationContext)">
            <summary>
            OnApplicationInitialization
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:LINGYUN.Abp.EventBus.CAP.AbpCAPEventBusOptions">
            <summary>
            过期消息清理配置项
            </summary>
        </member>
        <member name="P:LINGYUN.Abp.EventBus.CAP.AbpCAPEventBusOptions.NotifyFailedCallback">
            <summary>
            发布消息处理失败通知
            default: false
            </summary>
        </member>
        <member name="P:LINGYUN.Abp.EventBus.CAP.AbpCAPEventBusOptions.CleanUpExpiresMessageBatch">
            <summary>
            批量清理数量
            default: 1000
            </summary>
        </member>
        <member name="P:LINGYUN.Abp.EventBus.CAP.AbpCAPEventBusOptions.CleanUpExpiresMessageInterval">
            <summary>
            执行间隔(ms)
            default: 3600000 (1 hours)
            </summary>
        </member>
        <member name="T:LINGYUN.Abp.EventBus.CAP.AbpCAPExecutionFailedException">
            <summary>
            AbpECAPExecutionFailedException
            </summary>
        </member>
        <member name="P:LINGYUN.Abp.EventBus.CAP.AbpCAPExecutionFailedException.MessageType">
            <summary>
            MessageType
            </summary>
        </member>
        <member name="P:LINGYUN.Abp.EventBus.CAP.AbpCAPExecutionFailedException.Origin">
            <summary>
            Message
            </summary>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.AbpCAPExecutionFailedException.#ctor(DotNetCore.CAP.Messages.MessageType,DotNetCore.CAP.Messages.Message)">
            <summary>
            constructor
            </summary>
            <param name="messageType"></param>
            <param name="prigin"></param>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.AbpCAPExecutionFailedException.#ctor(DotNetCore.CAP.Messages.MessageType,DotNetCore.CAP.Messages.Message,System.String)">
            <summary>
            constructor
            </summary>
            <param name="messageType"></param>
            <param name="prigin"></param>
            <param name="message"></param>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.AbpCAPExecutionFailedException.#ctor(DotNetCore.CAP.Messages.MessageType,DotNetCore.CAP.Messages.Message,System.String,System.Exception)">
            <summary>
            constructor
            </summary>
            <param name="messageType"></param>
            <param name="prigin"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus">
            <summary>
            CAP分布式事件总线
            </summary>
        </member>
        <member name="P:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.AbpDistributedEventBusOptions">
            <summary>
            Abp分布式事件总线配置
            </summary>
        </member>
        <member name="F:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.CapPublisher">
            <summary>
            CAP消息发布接口
            </summary>
        </member>
        <member name="P:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.CustomDistributedEventSubscriber">
            <summary>
            自定义事件注册接口
            </summary>
        </member>
        <member name="P:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.HandlerFactories">
            <summary>
            本地事件处理器工厂对象集合
            </summary>
        </member>
        <member name="P:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.EventTypes">
            <summary>
            本地事件集合
            </summary>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.Options.IOptions{Volo.Abp.EventBus.Distributed.AbpDistributedEventBusOptions},DotNetCore.CAP.ICapPublisher,Volo.Abp.MultiTenancy.ICurrentTenant,LINGYUN.Abp.EventBus.CAP.ICustomDistributedEventSubscriber)">
            <summary>
            constructor
            </summary>
            <param name="serviceScopeFactory"></param>
            <param name="distributedEventBusOptions"></param>
            <param name="capPublisher"></param>
            <param name="currentTenant"></param>
            <param name="customDistributedEventSubscriber"></param>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.Subscribe(System.Type,Volo.Abp.EventBus.IEventHandlerFactory)">
            <summary>
            订阅事件
            </summary>
            <param name="eventType"></param>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.Unsubscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            退订事件
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
            <param name="action"></param>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.Unsubscribe(System.Type,Volo.Abp.EventBus.IEventHandler)">
            <summary>
            退订事件
            </summary>
            <param name="eventType">事件类型</param>
            <param name="handler">事件处理器</param>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.Unsubscribe(System.Type,Volo.Abp.EventBus.IEventHandlerFactory)">
            <summary>
            退订事件
            </summary>
            <param name="eventType">事件类型</param>
            <param name="factory">事件处理器工厂</param>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.UnsubscribeAll(System.Type)">
            <summary>
            退订所有事件
            </summary>
            <param name="eventType">事件类型</param>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.Subscribe``1(Volo.Abp.EventBus.Distributed.IDistributedEventHandler{``0})">
            <summary>
            订阅事件
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
            <param name="handler">事件处理器</param>
            <returns></returns>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.PublishAsync(System.Type,System.Object)">
            <summary>
            发布事件
            </summary>
            <param name="eventType">事件类型</param>
            <param name="eventData">事件数据对象</param>
            <returns></returns>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.CAPDistributedEventBus.GetHandlerFactories(System.Type)">
            <summary>
            获取事件处理器工厂列表
            </summary>
            <param name="eventType"></param>
            <returns></returns>
        </member>
        <member name="T:LINGYUN.Abp.EventBus.CAP.ICustomDistributedEventSubscriber">
            <summary>
            自定义事件订阅者
            </summary>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.ICustomDistributedEventSubscriber.Subscribe(System.Type,Volo.Abp.EventBus.IEventHandlerFactory)">
            <summary>
            订阅事件
            </summary>
            <param name="eventType"></param>
            <param name="factory"></param>
        </member>
        <member name="M:LINGYUN.Abp.EventBus.CAP.ICustomDistributedEventSubscriber.UnSubscribe(System.Type,Volo.Abp.EventBus.IEventHandlerFactory)">
            <summary>
            取消订阅
            </summary>
            <param name="eventType"></param>
            <param name="factory"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            CAP ServiceCollectionExtensions
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCAPEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{DotNetCore.CAP.CapOptions})">
            <summary>
            Adds and configures the consistence services for the consistency.
            </summary>
            <param name="services"></param>
            <param name="capAction"></param>
            <returns></returns>
        </member>
    </members>
</doc>
